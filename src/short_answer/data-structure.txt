***ANSWER ALL OF THE QUESTIONS BELOW***

Why do we need data structure?
Answer: Data structure enable us to handle the data in an efficient way. It plays a vital role in enhancing
    the performance of a software or a program as the main function of the software is to store and
    retrieve the user's data as fast as possible.

What are the various operations that can be performed on different data structures?
Answer: we can add elements, remove elements, sort elements, fetch elements, compare elements, from the data structures etc.

When would we use data structures in the real world?
Answer: To store password, so we can just implement it without remembering it.
    To store a set of fixed keywords which are referenced very frequently.
    To store the customer order information in a drive-in burger place. So on and so forth.

What is an Array?
Answer: An array is a data structure that contains a group of elements with similar data type.

What is the difference between Array and ArrayList?
Answer: An array is a basic data structured provided by java. ArrayList is part of the collection framework, and it implements the List interface.
    Array members are accessed using [], while ArrayList has a set of methods to access elements and modify them.
    In array the size of an array is fixed after initialization, arrayList Dynamic sized arrays, and can add or delete by implement List interface.

What is a LinkedList?
Answer: It is a data structure that implements the List interface. The elements are stored in nodes and nodes will be pointing to the next node.
    When adding a new element to a particular index, the previous index will point to the added element and the added element will point to the next index.
    LinkedList is a part of the Collection framework present in the java.util package.

How is an Array different from LinkedList?
Answer: An Array is a basic data structure built into java, LinkedList is a part of the collection framework.
    In array, elements are stored in a particular index. In linkList elements are stored in nodes and nodes will be pointing to the next node.
    Array's size is fixed after initialization, and LinkedList supports the add or delete of more elements.

What is a Queue?
Answer: Queue is java collection interface, it is an ordered list of objects that supports the principle of manipulating
    elements processed First In First Out order.

What is a Stack (referring to data structures)?
Answer: It is an ordered list of objects that supports the principle of manipulating elements starting from the end of the list Last In, First Out.

What are FIFO and LIFO?
Answer: FIFO is First In, First Out  and LIFO is Last, In, First Out

Explain Big O Notation?
Answer: Big O Notation describes the time or space required for the execution in a software program.
    Big O is also used to classify algorithms according to their run time or space requirements as the input size grows.

What is the best case to search an element from an array?
Answer: The best case to search an element from an array is 0(1).

What is the worst case to search an element from an array?
Answer: The worst case can be O(n/2).

Describe what a tree data structure is?
Answer: A Tree is a non-linear data structure (data elements are attached in hierarchically) unlike arrays, linked lists, stacks and queues which are linear data structures.
    A tree can be empty with no nodes or a structure consisting of one node called the root and zero or one or more subtrees.

Describe what a graph data structure is?
Answer: A graph is a non-linear data structure that consists of nodes and edges. The edges connect several nodes to create a graph-like structure.

What is the difference between the HashTable and HashMap?
Answer: HashMap is non-synchronized. It is not thread-safe and can't be shared between many threads without proper synchronization code.
    HashTable is synchronized and is thread-safe and can be shared with many threads.
    HashTables does not allow null keys or values.
    HashMap allows one null key and any number of null values.

How do HashMaps work in Java? How do they store values, and when are they useful?
Answer: HashMaps store values in keys. So a key refers to a specific value. They are useful when handling a single-thread applications as it performs better,
        because it is non-synchronized.

What is ArrayIndexOutOfBoundsException in java? When does it occur?
Answer:

What are the different ways of copying an array into another array?
Answer:

What is DFS and BFS?
Answer:

What is Recursion?
Answer:

What are linear and non-linear data Structures?
Answer:

Outline different sorting algorithms and their time complexities:

Algorithm Name: Selection Sort
        Time Complexity:
        ● Best: Ω(n^2)
        ● Average: θ(n^2)
        ● Worst: O(n^2)
        Algorithm Name: Bubble Sort
        Time Complexity:
        ● Best:Ω(n)
        ● Average:θ(n^2)
        ● Worst: O(n^2)
        Algorithm Name: Insertion Sort
        Time Complexity:
        ● Best:Ω(n)
        ● Average: θ(n^2)
        ● Worst: O(n^2)
        Algorithm Name: Heap Sort
        Time Complexity:
        ● Best: Ω(n log(n))
        ● Average: θ(n log(n))
        ● Worst: O(n log(n))
        Algorithm Name: Quick Sort
        Time Complexity:
        ● Best: Ω(n log(n))
        ● Average: θ(n log(n))
        ● Worst: O(n^2)
        Algorithm Name: Merge Sort
        Time Complexity:
        ● Best: Ω(n log(n))
        ● Average: θ(n log(n))
        ● Worst: O(n log(n))
        Algorithm Name: Bucket Sort
        Time Complexity:
        ● Best: Ω(n+k)
        ● Average: θ(n+k)
        ● Worst: O(n^2)
        Algorithm Name: Radix Sort
        Time Complexity:
        ● Best: Ω(nk)
        ● Average: θ(nk)
        ● Worst: O(nk)
